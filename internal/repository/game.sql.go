// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: game.sql

package repository

import (
	"context"
)

const createOrUpdateItem = `-- name: CreateOrUpdateItem :one
insert into game.items (id, category_id,world_id, code, name, description, item_properties, base_price)
values ( $1, $2, $3, $4, $5, $6, $7, $8)
on conflict (code, world_id) do update set category_id = $2, world_id = $3,code = $4, name = $5, description = $6, item_properties = $7, base_price = $8
returning id, category_id, name, description, item_properties, created_at, updated_at, item_type, code, base_price, world_id
`

type CreateOrUpdateItemParams struct {
	ID             int64  `json:"id"`
	CategoryID     int64  `json:"category_id"`
	WorldID        int64  `json:"world_id"`
	Code           string `json:"code"`
	Name           string `json:"name"`
	Description    string `json:"description"`
	ItemProperties []byte `json:"item_properties"`
	BasePrice      int64  `json:"base_price"`
}

func (q *Queries) CreateOrUpdateItem(ctx context.Context, db DBTX, arg *CreateOrUpdateItemParams) (*GameItem, error) {
	row := db.QueryRow(ctx, createOrUpdateItem,
		arg.ID,
		arg.CategoryID,
		arg.WorldID,
		arg.Code,
		arg.Name,
		arg.Description,
		arg.ItemProperties,
		arg.BasePrice,
	)
	var i GameItem
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.Name,
		&i.Description,
		&i.ItemProperties,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ItemType,
		&i.Code,
		&i.BasePrice,
		&i.WorldID,
	)
	return &i, err
}

const getItemByCode = `-- name: GetItemByCode :one
select id, category_id, name, description, item_properties, created_at, updated_at, item_type, code, base_price, world_id from game.items where code = $1 and world_id = $2
`

type GetItemByCodeParams struct {
	Code    string `json:"code"`
	WorldID int64  `json:"world_id"`
}

func (q *Queries) GetItemByCode(ctx context.Context, db DBTX, arg *GetItemByCodeParams) (*GameItem, error) {
	row := db.QueryRow(ctx, getItemByCode, arg.Code, arg.WorldID)
	var i GameItem
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.Name,
		&i.Description,
		&i.ItemProperties,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ItemType,
		&i.Code,
		&i.BasePrice,
		&i.WorldID,
	)
	return &i, err
}

const getItemByID = `-- name: GetItemByID :one
select id, category_id, name, description, item_properties, created_at, updated_at, item_type, code, base_price, world_id from game.items where id = $1
`

// Items
func (q *Queries) GetItemByID(ctx context.Context, db DBTX, id int64) (*GameItem, error) {
	row := db.QueryRow(ctx, getItemByID, id)
	var i GameItem
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.Name,
		&i.Description,
		&i.ItemProperties,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ItemType,
		&i.Code,
		&i.BasePrice,
		&i.WorldID,
	)
	return &i, err
}
